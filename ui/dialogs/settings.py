# -*- coding: utf-8 -*-
"""
/***************************************************************************
 GisFIRELightnings
                                 A QGIS plugin
 GisFIRE module to manage lightning information, clustering and routing for
 wildfire surveillance
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-05-20
        git sha              : $Format:%H$
        copyright            : (C) 2020 by Jaume Figueras
        email                : jaume.figueras@upc.edu
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation version 3                                *
 *                                                                         *
 ***************************************************************************/
"""

from .ui import get_ui_class

from qgis.PyQt.QtWidgets import QDialog

import os.path

FORM_CLASS = get_ui_class(os.path.dirname(__file__), 'settings.ui')
class DlgSettings(QDialog, FORM_CLASS):
    """Dialog to define the different system paraeters."""
    def __init__(self, parent=None):
        """Constructor."""
        QDialog.__init__(self, parent)
        self.setupUi(self)

    @property
    def meteocat_api_key(self):
        return self.txtMeteoCatApiKey.text()

    @meteocat_api_key.setter
    def meteocat_api_key(self, value):
        self.txtMeteoCatApiKey.setText(value)

    @property
    def gisfire_api_url(self):
        return self.txtGisFireApiBaseUrl.text()

    @gisfire_api_url.setter
    def gisfire_api_url(self, value):
        self.txtGisFireApiBaseUrl.setText(value)

    @property
    def gisfire_api_username(self):
        return self.txtGisFireApiUsername.text()

    @gisfire_api_username.setter
    def gisfire_api_username(self, value):
        self.txtGisFireApiUsername.setText(value)

    @property
    def gisfire_api_token(self):
        return self.txtGisFireApiToken.text()

    @gisfire_api_token.setter
    def gisfire_api_token(self, value):
        self.txtGisFireApiToken.setText(value)
